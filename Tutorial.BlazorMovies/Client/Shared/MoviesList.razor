@inject IJSRuntime js

@*passing parameter*@
<input type="checkbox" @onchange="@(() => _displayButtons = !_displayButtons)" />

@*binding values*@
<input type="checkbox" @bind="_displayButtons" />


@*context => refernz zum generischen typ, welcher aktuell verwendet wird*@
@*context kann umbenannt werden mit Context="wunschName"*@
<GenericList List="Movies" Context="movie">
    <ElementTemplate>
        <IndividualMovie Movie="@movie" DisplayButtons="@_displayButtons" DeleteMovie="DeleteMovie"></IndividualMovie>
    </ElementTemplate>
</GenericList>

@code {

    [Parameter]
    public List<Movie> Movies { get; set; }

    bool _displayButtons = true;

    private async Task DeleteMovie(Movie movie)
    {
        var confirmed = await js.Confirm($"Delete movie {movie.Title}?");

        if (confirmed)
        {
            Movies.Remove(movie);
            await js.MyFunction($"{movie.Title} was deleted");
        }
    }


    //Life Cycle Methods of a Component
    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized. Movies.Count=" + Movies.Count.ToString());
    }

    //wird jedes mal, wenn ein parameter geändert wird ausgeführt
    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParametersSet. Movies.Count=" + Movies.Count.ToString());
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("OnAfterRender. First render" + firstRender);
    }

    //erstellt elemente auf der seite neu
    protected override bool ShouldRender()
    {
        return true;
    }
}